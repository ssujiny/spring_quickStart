<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<context:property-placeholder location="classpath:config/database.properties" />
	
	<!-- DataSource 설정 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource" ></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<tx:annotation-driven proxy-target-class="true"/>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!--  Setter 인젝션 설정 
	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" />
	-->
	
	
	<!--	
			spring AOP
				클라이언트가 핵심관심 메소드 호출 -> 횡단관심 메소드를 적절하게 실행시켜줌
				핵심관심 & 횡단관심 사이에서 소스상의 결합은 발생X : AOP를 사용하는 주된 목적! 
				BoardServiceImpl.java 파일의 수정 필요 없이 여기서 설정 변경만 해주면 된다.
				
				- Joinpoint
					클라이언트가 호출하는 모든 비즈니스 메소드(-> 선택 : 포인트컷 대상/후보)
				- Pointcut
					필터링된 조인포인트
					aop:pointcut 엘리먼트로 선언, 
						id속성: 포인트컷 식별, expression속성: 값에 따라 필터링 메소드 변화됨 
				- Advice
					횡단관심에 해당하는 공통 기능의 코드
					독립된 클래스의 메소드로 작성
					동작 시점) before, after, after-returning, after-throwing, around
				- Weaving
					포인트컷으로 지정한 핵심 관심 메소드가 호출될 때, 어드바이스에 해당하는 횡단관심메소드가 삽입되는 과정
					-> 비즈니스로직 수정 없이 횡단관심 기능 추가/변경 가능
					스프링에서는 런타임 위빙만 지원
				- Aspect OR Advisor
					AOP의 핵심, 포인트컷과 어드바이스의 결합
					어떤 포인트컷 메소드에 대해서 어떤 어드바이스 메소드를 실행할지 결정(AOP 동작방식 결정) -> 위빙 처리
	 
	 
	<bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean>
	
	<bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice" />
	
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice" />
	
	<bean id="after" class="com.springbook.biz.common.AfterAdvice" />
	
	<bean id="around" class="com.springbook.biz.common.AroundAdvice" />
	-->
	
	<aop:config>
		
		<!-- Transaction 설정 -->
		<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*(..))" />
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
		
		<!--  
		 리턴타입/매개변수 무시, com.springbook.biz패키지로 시작하는 클래스 중에서 이름이 Impl로 끝나는 클래스의 모든 메소드 : 포인트컷 지정
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		
		 위와 모두 같으면서 Impl로 끝나는 클래스 중 get으로 시작하는 메소드
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />
		
		<aop:aspect ref="logAdvice">
			<aop:after pointcut-ref="allPointcut" method="printLog" />
		</aop:aspect>
		
		<aop:aspect ref="log">
			<aop:after pointcut-ref="getPointcut" method="printLogging" />
		</aop:aspect>
		
		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj" />
		</aop:aspect>
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj" />
		</aop:aspect>
		
		<aop:aspect ref="after">
			<aop:after pointcut-ref="allPointcut" method="finallyLog" />
		</aop:aspect>
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog" />
		</aop:aspect>
		-->
	</aop:config>
	
</beans>